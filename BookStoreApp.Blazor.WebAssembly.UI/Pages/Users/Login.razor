@*cip...39*@
@page "/users/login"
@inject IAuthenticationService authService;
@inject NavigationManager navManager

<h3>Login</h3>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-danger" role="alert">
        <p>@message</p>
    </div>
}

<div>
    <EditForm Model="LoginModel" OnValidSubmit="HandleLoginAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="email">Email Address</label>
            <InputText class="form-control" @bind-Value="LoginModel.Email" />
            <ValidationMessage For="@(() => LoginModel.Email)" />
        </div>
        <br />
        <div class="form-group">
            <label for="email">Password</label>
            <InputText class="form-control" type="password" @bind-Value="LoginModel.Password" />
            <ValidationMessage For="@(() => LoginModel.Password)" />
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Login</button>
    </EditForm>
</div>

@code {
    LoginUserDto LoginModel = new();
    string message = string.Empty;

    public async Task HandleLoginAsync()
    {
        try
        {
            var response = await authService.AuthenticateAsync(LoginModel);
            if (response)
            {
                // Handle successful login, e.g., redirect to home page
                navManager.NavigateTo("/");
            }
        }
        catch (ApiException ex)
        {
            if (ex.StatusCode >= 200 && ex.StatusCode <= 299)
            {
                // Registration successful, redirect home page
                navManager.NavigateTo("/users/login");
                //return;
            }
            message = ex.Message;
        }
    }
}
