@*cip...54*@
@page "/books/create/"
@inject IBookService bookService;
@inject IAuthorService authorService;
@inject NavigationManager navManager;
@*cip...49. vsc won't let me add to below line *@
@attribute [Authorize(Roles = Roles.Administrator)]

<h3>Create New Book</h3>

@if (!response.Success)
{
    <div class="alert alert-danger">
        <h4>@response.Message</h4>
    </div>
}
<EditForm Model="newBook" OnValidSubmit="HandleCreate">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label for="title" class="form-label">Title</label>
        <InputText id="title" class="form-control" @bind-Value="newBook.Title" />
        <ValidationMessage For="@(() => newBook.Title)" />
    </div>
    <div class="mb-3">
        <label for="isbn" class="form-label">ISBN</label>
        <InputText id="isbn" class="form-control" @bind-Value="newBook.Isbn" />
        <ValidationMessage For="@(() => newBook.Isbn)" />
    </div>
    <div class="mb-3">
        <label for="price" class="form-label">Price</label>
        <InputNumber id="price" class="form-control" @bind-Value="newBook.Price" />
        <ValidationMessage For="@(() => newBook.Price)" />
    </div>
    <div class="mb-3">
        <label for="summary" class="form-label">Summary</label>
        <InputTextArea id="summary" class="form-control" @bind-Value="newBook.Summary" />
        <ValidationMessage For="@(() => newBook.Summary)" />
    </div>
    <div class="mb-3">
        <label for="author" class="form-label">Author`</label>
        <InputSelect id="author" class="form-control" @bind-Value="newBook.AuthorId">
            <option value="">-- Select Author --</option>
            @foreach (var author in Authors)
            {
                <option value="@author.Id">@author.FirstName @author.LastName</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => newBook.AuthorId)" />
    </div>
    <br />
    <div class="mb-3">
        <label>Book Cover Photo</label>
        <div>
            <InputFile OnChange="HandleFileSelection" />
            <p class="text-danger">@UploadFileWarning</p>
            <ValidationMessage For="@(() => newBook.Image)" />
        </div>
    </div>
    <button type="submit" class="btn btn-primary">
        <span class="oi oi-pencil" aria-hidden="true"></span>
        Create Book
    </button>
    <button type="button" class="btn btn-secondary" @onclick="NavigateToBooks">
        <span class="oi oi-x" aria-hidden="true"></span>
        Cancel
    </button>
</EditForm>

@code {
    private BookCreateDto newBook = new BookCreateDto();
    private List<AuthorReadOnlyDto> Authors;
    private string UploadFileWarning = string.Empty;
    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            if (file.Size > 1024 * 1024 * 2) // 2MB limit
            {
                UploadFileWarning = "File size exceeds the 2MB limit.";
                newBook.Image = null;
            }
            else
            {
                var buffer = new byte[file.Size];
                await file.OpenReadStream(1024 * 1024 * 2).ReadAsync(buffer);
                newBook.Image = buffer;
                UploadFileWarning = string.Empty; // Clear any previous warnings
            }
        }
    }
    private Response<int> response = new() { Success = true };

    protected override async Task OnInitializedAsync()
    {
        var response = await authorService.GetAsync();
        if (response.Success)
        {
            Authors = response.Data;
        }
    }

    private async Task HandleCreate()
    {
        response = await bookService.CreateAsync(newBook);
        if (response.Success)
        {
            // Navigate to the authors list or show a success message
            // For example:
            NavigateToBooks();
        }
        else
        {
            // Handle the error (e.g., show an error message)
        }
    }

    private void NavigateToBooks()
    {
        navManager.NavigateTo("/books");
    }
}
