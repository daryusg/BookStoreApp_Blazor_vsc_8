@*cip...53*@
@page "/books/"
@inject IBookService bookService;
@inject IJSRuntime jsRuntime //cip...48

<h3>Index</h3>

@if (!response.Success || !deletionResponse.Success)
{
    <div class="alert alert-danger">
        <h4>@string.Concat(@response.Message, @deletionResponse.Message)</h4> @*NOTE: a cheat as only 1 will have an entry*@
    </div>
}

@if (books == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <AuthorizeView Roles=@Roles.Administrator>
        <a class="btn btn-dark" href="/books/create"><span class="oi oi-plus" aria-hidden="true"></span>Create</a>
    </AuthorizeView>
    <br />
    <table class="table table-responsive">
        <thead>
            <tr>
                <th></th>
                <th>Title</th>
                <th>Price</th>
                <th>Author</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in books)
            {
                <tr>
                    <td>
                        <img src="@book.Image" alt="@book.Title" style="max-height:100px; max-width:100px;" />
                    </td>
                    <td>@book.Title</td>
                    <td>@book.Price.ToString("C")</td>
                    <td><a class="" href="/authors/details/@book.AuthorId">@book.AuthorName</a></td> @*cip...56 link added*@
                    <td>
                        <a class="btn btn-primary" href="/books/details/@book.Id"><span class="oi oi-person" aria-hidden="true"></span>Details</a>
                        <AuthorizeView Roles=@Roles.Administrator>
                            <a class="btn btn-warning" href="/books/update/@book.Id"><span class="oi oi-pencil" aria-hidden="true"></span>Edit</a>
                            <button class="btn btn-danger" @onclick=@(() => DeleteAsync(@book.Id))><span class="oi oi-trash" aria-hidden="true"></span>Delete</button>
                        </AuthorizeView>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<BookReadOnlyDto> books;
    private Response<List<BookReadOnlyDto>> response = new() { Success = true };
    private Response<int> deletionResponse = new() { Success = true };
    protected override async Task OnInitializedAsync()
    {
        var response = await bookService.GetAsync();
        if (response.Success)
        {
            books = response.Data;
        }
    }

    private async Task DeleteAsync(int id)
    {
        var book = books.First(b => b.Id == id);
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete: {book.Title}?");
        if (confirm)
        {
            @*Yes*@
            deletionResponse = await bookService.DeleteAsync(id);
            if (response.Success)
                await OnInitializedAsync(); @*refresh the page*@
        }
    }
}
