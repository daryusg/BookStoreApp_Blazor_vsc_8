@*cip...66*@
@inject IAuthorService authorService;
@inject IJSRuntime jsRuntime;

@using BookStoreApp.API.Models
<table class="table table-responsive">
    <thead>
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        <Virtualize ItemsProvider="LoadAuthors" Context="author">
            <tr>
                <td>@author.FirstName</td>
                <td>@author.LastName</td>
                <td>
                    <a class="btn btn-primary" href="/authors/details/@author.Id"><span class="oi oi-person"
                            aria-hidden="true"></span>Details</a>
                    <AuthorizeView Roles=@Roles.Administrator>
                        <a class="btn btn-warning" href="/authors/update/@author.Id"><span class="oi oi-pencil"
                                aria-hidden="true"></span>Edit</a>
                        <button class="btn btn-danger" @onclick=@(() => DeleteAsync(@author.Id))><span
                                class="oi oi-trash" aria-hidden="true"></span>Delete</button>
                    </AuthorizeView>
                </td>
            </tr>
        </Virtualize>
    </tbody>
</table>

@code {
    [Parameter]
    public List<AuthorReadOnlyDto> Authors { get; set; }
    [Parameter]
    public int TotalCount { get; set; }
    [Parameter]
    public EventCallback<QueryParameters> onscroll { get; set; }

    private async ValueTask<ItemsProviderResult<AuthorReadOnlyDto>> LoadAuthors(ItemsProviderRequest request)
    {
        var authorNum = Math.Min(request.Count, TotalCount - request.StartIndex);
        await onscroll.InvokeAsync(new QueryParameters
        {
            PageNumber = request.StartIndex / request.Count,
            PageSize = authorNum ==0 ? request.Count : authorNum
        });
        return new ItemsProviderResult<AuthorReadOnlyDto>(Authors, TotalCount);
    }

    private async Task DeleteAsync(int id)
    {
        var author = Authors.First(a => a.Id == id);
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete: {author.FirstName} {author.LastName}?");
        if (confirm)
        {
            deletionResponse = await authorService.DeleteAsync(id);
            if (response.Success)
                await OnInitializedAsync(); @*refresh the page*@
        }
    }
}