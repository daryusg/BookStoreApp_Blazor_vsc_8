@inject IAuthorService authorService;
@inject IJSRuntime jsRuntime;

<table class="table table-responsive">
    <thead>
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        <Virtualize ItemsProvider="LoadAuthors" Context="author">
            <tr>
                <td>@author.FirstName</td>
                <td>@author.LastName</td>
                <td>
                    <a class="btn btn-primary" href="/authors/details/@author.Id">
                        <span class="oi oi-person" aria-hidden="true"></span>Details
                    </a>
                    <AuthorizeView Roles=@Roles.Administrator>
                        <a class="btn btn-warning" href="/authors/update/@author.Id">
                            <span class="oi oi-pencil" aria-hidden="true"></span>Edit
                        </a>
                        <button class="btn btn-danger" @onclick="@(() => DeleteAsync(author))">
                            <span class="oi oi-trash" aria-hidden="true"></span>Delete
                        </button>
                    </AuthorizeView>
                </td>
            </tr>
        </Virtualize>
    </tbody>
</table>

@code {
    [Parameter]
    public EventCallback<int> OnDeleted { get; set; }

    private async ValueTask<ItemsProviderResult<AuthorReadOnlyDto>> LoadAuthors(ItemsProviderRequest request)
    {
        int pageSize = request.Count;
        int startIndex = request.StartIndex;

        var queryParams = new QueryParameters
        {
            StartIndex = startIndex,
            PageSize = pageSize
        };

        var result = await authorService.GetAsync(queryParams);

        if (!result.Success || result.Data == null)
        {
            return new ItemsProviderResult<AuthorReadOnlyDto>(Array.Empty<AuthorReadOnlyDto>(), 0);
        }

        return new ItemsProviderResult<AuthorReadOnlyDto>(
            result.Data.Items,
            result.Data.TotalSize
        );
    }

    private async Task DeleteAsync(AuthorReadOnlyDto author)
    {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete: {author.FirstName} {author.LastName}?");
        if (confirm)
        {
            await OnDeleted.InvokeAsync(author.Id);
        }
    }
}
