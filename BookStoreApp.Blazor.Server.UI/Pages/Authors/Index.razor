@*cip...44*@
@page "/authors/"
@using BookStoreApp.API.Models
@inject IAuthorService authorService;
@inject IJSRuntime jsRuntime //cip...48

<h3>Index</h3>

@if (!response.Success || !deletionResponse.Success)
{
    <div class="alert alert-danger">
        @* copilot
        <span class="oi oi-warning" aria-hidden="true"></span>
        @response.Message
        *@
        <h4>@string.Concat(@response.Message, @deletionResponse.Message)</h4> @*NOTE: a cheat as only 1 will have an entry*@
    </div>
}

@if (Authors == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <AuthorizeView Roles=@Roles.Administrator>
        <a class="btn btn-dark" href="/authors/create"><span class="oi oi-plus" aria-hidden="true"></span>Create</a>
    </AuthorizeView>
    <br />
    @* <table class="table table-responsive">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var author in Authors)
            {
                <tr>
                    <td>@author.FirstName</td>
                    <td>@author.LastName</td>
                    <td>
                        <a class="btn btn-primary" href="/authors/details/@author.Id"><span class="oi oi-person" aria-hidden="true"></span>Details</a>
                        <AuthorizeView Roles=@Roles.Administrator>
                            <a class="btn btn-warning" href="/authors/update/@author.Id"><span class="oi oi-pencil" aria-hidden="true"></span>Edit</a>
                            <button class="btn btn-danger" @onclick=@(() => DeleteAsync(@author.Id))><span class="oi oi-trash" aria-hidden="true"></span>Delete</button>
                        </AuthorizeView>
                    </td>
                </tr>
            }
        </tbody>
    </table> cip...66*@
    <AuthorTable Authors="Authors" TotalSize="TotalCount" onscroll="LoadAuthors" />
}

@code {
    //private List<AuthorReadOnlyDto> Authors;
    public List<AuthorReadOnlyDto> Authors; //cip...66
    public int TotalCount; //cip...66
    private Response<List<AuthorReadOnlyDto>> response = new() { Success = true };
    //private Response<int> deletionResponse = new() { Success = true };
    public Response<int> deletionResponse = new() { Success = true };
    protected override async Task OnInitializedAsync()
    {
        var response = await authorService.GetAsync(new QueryParameters { PageNumber = 0});
        if (response.Success)
        {
            Authors = response.Data.Items.ToList();
        }
    }
    private async Task LoadAuthors(QueryParameters queryParams) //cip...66
    {
        var virtualiseResult = await authorService.GetAsync(queryParams);
            Authors = virtualiseResult.Data.Items.ToList();
            TotalCount = virtualiseResult.Data.TotalCount;
    }

    @* private async Task DeleteAsync(int id)
    {
        var author = Authors.First(a => a.Id == id);
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete: {author.FirstName} {author.LastName}?");
        if (confirm)
        {
            @*Yes
            deletionResponse = await authorService.DeleteAsync(id);
            if (response.Success)
                await OnInitializedAsync(); @*refresh the page
        }
    } cip...66*@
}
