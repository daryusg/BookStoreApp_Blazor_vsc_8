using AutoMapper;
using BookStoreApp.API.Data;
using BookStoreApp.API.Data.Models.Author;
using BookStoreApp.API.Data.Models.Book;

namespace BookStoreApp.API.Configurations;

public class MapperConfig : Profile //cip...19
{
    public MapperConfig()
    {
        CreateMap<AuthorCreateDto, Author>().ReverseMap(); // Maps AuthorCreateDto to Author and vice versa
                                                           //copilot: .ForMember(dest => dest.Id, opt => opt.Ignore()); // Ignore Id as it will be generated by the database  
        CreateMap<AuthorUpdateDto, Author>().ReverseMap(); // Maps AuthorUpdateDto to Author and vice versa
        CreateMap<AuthorReadOnlyDto, Author>().ReverseMap(); // Maps AuthorReadOnlyDto to Author and vice versa

        CreateMap<BookCreateDto, Book>().ReverseMap(); // Maps BookCreateDto to Book and vice versa
        CreateMap<BookUpdateDto, Book>().ReverseMap(); // Maps BookUpdateDto to Book and vice versa
        CreateMap<Book, BookReadOnlyDto>()
            .ForMember(dest => dest.AuthorName, opt => opt.MapFrom(src => $"{src.Author.FirstName} {src.Author.LastName}")) // Maps Author's Full Name to AuthorName
            .ReverseMap(); // Maps Book to BookReadOnlyDto and vice versa //cip...24
        CreateMap<Book, BookDetailsDto>()
            .ForMember(dest => dest.AuthorName, opt => opt.MapFrom(src => $"{src.Author.FirstName} {src.Author.LastName}")) // Maps Author's Full Name to AuthorName
            .ReverseMap(); // Maps Book to BookReadOnlyDto and vice versa //cip...24
    }
}
